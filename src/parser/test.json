// 3_01
vec![
    ASTNode::Command(Command::SetX(Expression::Number(50.0))),
    ASTNode::Command(Command::Right(Expression::Number(10.0))),
    ASTNode::ControlFlow(ControlFlow::If {
        condition: Condition::Equals(
            Expression::Query(Query::XCor),
            Expression::Number(60.0)
        ),
        block: vec![
            ASTNode::Command(Command::PenDown),
            ASTNode::Command(Command::SetPenColor(Expression::Number(13.0))),
        ],
    }),
    ASTNode::ControlFlow(ControlFlow::If {
        condition: Condition::Equals(
            Expression::Query(Query::YCor),
            Expression::Number(60.0)
        ),
        block: vec![
            ASTNode::Command(Command::SetPenColor(Expression::Number(15.0))),
        ],
    }),
    ASTNode::Command(Command::Left(Expression::Number(10.0))),
]

#[derive(Debug, Clone)]
pub enum ASTNode {
    Command(Command),
    ControlFlow(ControlFlow),
    // Other types as needed
}

#[derive(Debug, Clone)]
pub enum Command {
    SetX(Expression),
    Right(Expression),
    PenDown,
    SetPenColor(Expression),
    Left(Expression),
    // Other commands...
}

#[derive(Debug, Clone)]
pub enum ControlFlow {
    If { condition: Condition, block: Vec<ASTNode> },
    // While loops, etc.
}

#[derive(Debug, Clone)]
pub enum Condition {
    Equals(Expression, Expression),
    // Other condition types as needed...
}

#[derive(Debug, Clone)]
pub enum Expression {
    Number(f32),
    Query(Query),
    // Variables, etc.
}

#[derive(Debug, Clone)]
pub enum Query {
    XCor,
    YCor,
    // Other queries...
}

